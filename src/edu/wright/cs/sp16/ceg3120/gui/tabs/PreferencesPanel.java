/*
 * Copyright (C) 2016
 * 
 * 
 * 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package edu.wright.cs.sp16.ceg3120.gui.tabs;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;

import edu.wright.cs.sp16.ceg3120.MainApp;
import edu.wright.cs.sp16.ceg3120.util.Encoding;
import edu.wright.cs.sp16.ceg3120.util.NumberOfQueries;
import edu.wright.cs.sp16.ceg3120.util.UserSettings;

/**
 * This class is created to display the preferences window which contains the
 * connections and the user preferences. The user will set the default database,
 * default view, default encoding, table view, and remember any few number of
 * last queriesLabel.
 */
public class PreferencesPanel extends JPanel {

	/**
	 * generic static final long serialVersionUID.
	 */
	private static final long serialVersionUID = 3936531799918625132L;

	// Components of window declaration - do not modify
	private JComboBox<String> defaultDatabaseComboBox;
	private JComboBox<Encoding> defaultEncodingComboBox;
	private JComboBox<String> defaultViewComboBox;
	private JLabel defaultEncodingLabel;
	private JLabel defaultFavoriteLabel;
	private JLabel defaultViewLabel;
	private JCheckBox gridLinesCheckBox;
	private JComboBox<NumberOfQueries> pxQueriesComboBox;
	private JLabel queriesLabel;
	private JLabel rememberLastLabel;
	private JCheckBox startupConnectCheckBox;
	private JCheckBox startupMotdCheckBox;
	private JLabel tableViewsLabel;
	private JCheckBox useMonospacedCheckBox;
	// End of variables declaration

	private UserSettings initSettings;

	private static final String SETTINGS_FILE_NAME = "Preferences.xml";

	/**
	 * Constructor with zero-arguments to open the connection window.
	 */
	public PreferencesPanel(JButton btnClose) {

		initSettings = UserSettings.loadXmlEncodedBean(SETTINGS_FILE_NAME);

		//changedSettings = new UserSettings(initSettings);
		
		// This method is created by GUI Builder to customize how the window
		// will look like ,,,
		initComponents(btnClose);
	
		//load settings into gui
		
		//TODO make view enum and get database list from profile
		defaultDatabaseComboBox.addItem(initSettings.getDefaultDatabase());
		defaultViewComboBox.addItem(initSettings.getDefaultView());
		
		
		defaultEncodingComboBox.setSelectedItem(initSettings.getDefaultEncoding());
		startupConnectCheckBox.setSelected(initSettings.isConnectOnStartup());
		startupMotdCheckBox.setSelected(initSettings.isMessageOfTheDay());
		useMonospacedCheckBox.setSelected( initSettings.isMonspacedFonts());
		gridLinesCheckBox.setSelected(initSettings.isShowGridLines());
		pxQueriesComboBox.setSelectedItem(initSettings.getNumberOfQueries());
	} 

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents(JButton btnClose) {

		// Initializing components of the window ,,,

		defaultFavoriteLabel = new JLabel();   //default database
		defaultViewLabel = new JLabel();       //default view
		defaultEncodingLabel = new JLabel();   //default encoding
		tableViewsLabel = new JLabel();        //table views
		rememberLastLabel = new JLabel();     //remember last
		defaultDatabaseComboBox = new JComboBox<>();          //default database
		defaultEncodingComboBox = new JComboBox<>();          //default view
		defaultEncodingComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent encoding) {
				initSettings.setDefaultEncoding((Encoding)
						defaultEncodingComboBox.getSelectedItem());
			}
		});
		defaultViewComboBox = new JComboBox<>();          //default encoding
		startupConnectCheckBox = new JCheckBox();   //connect on startup
		startupConnectCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (initSettings.isConnectOnStartup() == true) {
					initSettings.setConnectOnStartup(false);
				} else {
					initSettings.setConnectOnStartup(true);
				}
			}
		});
		startupMotdCheckBox = new JCheckBox();      //show message of the day
		startupMotdCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent startUp) {
				if (initSettings.isMessageOfTheDay() == true) {
					initSettings.setMessageOfTheDay(false);
				} else {
					initSettings.setMessageOfTheDay(true);
				}
			}
		});
		useMonospacedCheckBox = new JCheckBox();    //use monospaced fonts
		useMonospacedCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent monoSpaced) {
				if (initSettings.isMonspacedFonts() == true) {
					initSettings.setMonspacedFonts(false);
				} else {
					initSettings.setMonspacedFonts(true);
				}
			}
		});
		gridLinesCheckBox = new JCheckBox();        //show gridlines
		gridLinesCheckBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent gridLine) {
				if (initSettings.isShowGridLines() == true) {
					initSettings.setShowGridLines(false);
				} else {
					initSettings.setShowGridLines(true);
				}
			}
		});
		pxQueriesComboBox = new JComboBox<NumberOfQueries>();    //show queriesLabel
		pxQueriesComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent queries) {
				initSettings.setNumberOfQueries((NumberOfQueries) 
						pxQueriesComboBox.getSelectedItem());
			}
		});
		queriesLabel = new JLabel();

		defaultFavoriteLabel.setText("Default Database:");

		defaultViewLabel.setText("Default View:");

		defaultEncodingLabel.setText("Default Encoding:");

		tableViewsLabel.setText("Table Views:");

		rememberLastLabel.setText("Remember Last:");

		startupConnectCheckBox.setFont(new Font("Lucida Grande", 0, 11)); // NOI18N
		startupConnectCheckBox.setText("Connect to Default on Startup");

		startupMotdCheckBox.setFont(new Font("Lucida Grande", 0, 11)); // NOI18N
		startupMotdCheckBox.setText("\"Message of the Day\" on Startup");

		useMonospacedCheckBox.setFont(new Font("Lucida Grande", 0, 11)); // NOI18N
		useMonospacedCheckBox.setText("Use monospaced fonts");

		gridLinesCheckBox.setFont(new Font("Lucida Grande", 0, 11)); // NOI18N
		gridLinesCheckBox.setText("Display vertical grid lines");

		pxQueriesComboBox.setModel(new DefaultComboBoxModel<>(new NumberOfQueries[] {
				NumberOfQueries.Zero, NumberOfQueries.Five,
				NumberOfQueries.Ten, NumberOfQueries.Twenty }));
		
		
		defaultEncodingComboBox.setModel(new DefaultComboBoxModel<>(Encoding.values()));
		
		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent save) {
				MainApp.updateGlobalSettings(initSettings);
				initSettings.saveXmlEncodedBean(SETTINGS_FILE_NAME);
			}
		});
		
		/*
		 * we have to work on the cancel button currently it will close the
		 * entire window when it is hit. We have to reconfigure so it can just
		 * close the preference tab.
		 **/
		JButton btnCancel = btnClose;
		btnCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent cancel) {

			}
		});
		

		GroupLayout jpanel2Layout = new GroupLayout(this);
		jpanel2Layout.setHorizontalGroup(
				jpanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jpanel2Layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(defaultFavoriteLabel)
						.addComponent(defaultEncodingLabel)
						.addComponent(defaultViewLabel)
						.addComponent(tableViewsLabel)
						.addComponent(rememberLastLabel))
					.addGap(59)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jpanel2Layout.createSequentialGroup()
							.addComponent(
									pxQueriesComboBox, 
									GroupLayout.PREFERRED_SIZE, 
									GroupLayout.DEFAULT_SIZE, 
									GroupLayout.PREFERRED_SIZE)
							.addGap(18)
							.addComponent(queriesLabel)
							.addPreferredGap(ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
							.addComponent(btnSave)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnCancel))
						.addComponent(useMonospacedCheckBox)
						.addComponent(defaultViewComboBox, 
								GroupLayout.PREFERRED_SIZE, 166, 
								GroupLayout.PREFERRED_SIZE)
						.addComponent(defaultEncodingComboBox, 
								GroupLayout.PREFERRED_SIZE, 166, 
								GroupLayout.PREFERRED_SIZE)
						.addComponent(defaultDatabaseComboBox, 
								GroupLayout.PREFERRED_SIZE, 166, 
								GroupLayout.PREFERRED_SIZE)
						.addComponent(startupConnectCheckBox)
						.addComponent(startupMotdCheckBox)
						.addComponent(gridLinesCheckBox))
					.addContainerGap())
		);
		jpanel2Layout.setVerticalGroup(
				jpanel2Layout.createParallelGroup(Alignment.LEADING)
				.addGroup(jpanel2Layout.createSequentialGroup()
					.addGap(20)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(defaultFavoriteLabel)
						.addComponent(defaultDatabaseComboBox, 
								GroupLayout.PREFERRED_SIZE, 
								GroupLayout.DEFAULT_SIZE, 
								GroupLayout.PREFERRED_SIZE))
					.addGap(2)
					.addComponent(startupConnectCheckBox)
					.addGap(3)
					.addComponent(startupMotdCheckBox)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(defaultViewLabel)
						.addComponent(defaultViewComboBox, 
								GroupLayout.PREFERRED_SIZE, 
								GroupLayout.DEFAULT_SIZE, 
								GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(defaultEncodingLabel)
						.addComponent(defaultEncodingComboBox, 
								GroupLayout.PREFERRED_SIZE, 
								GroupLayout.DEFAULT_SIZE, 
								GroupLayout.PREFERRED_SIZE))
					.addGap(18)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addGroup(jpanel2Layout.createSequentialGroup()
							.addComponent(useMonospacedCheckBox)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(gridLinesCheckBox))
						.addComponent(tableViewsLabel))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.LEADING)
						.addComponent(rememberLastLabel)
						.addGroup(jpanel2Layout.createParallelGroup(Alignment.BASELINE)
							.addComponent(pxQueriesComboBox, 
									GroupLayout.PREFERRED_SIZE, 
									GroupLayout.DEFAULT_SIZE, 
									GroupLayout.PREFERRED_SIZE)
							.addComponent(queriesLabel)))
					.addContainerGap(33, Short.MAX_VALUE))
				.addGroup(Alignment.TRAILING, jpanel2Layout.createSequentialGroup()
					.addContainerGap(236, Short.MAX_VALUE)
					.addGroup(jpanel2Layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnSave)
						.addComponent(btnCancel))
					.addContainerGap())
		);
		this.setLayout(jpanel2Layout);

		setVisible(true);

	} // End of initComponents method ,,,
	

	/**
	 * The method to run the profile window.
	 * This now runs from MainApp by clicking the profile button
	 */
	public static void mainProfile() {
		/* Set the Nimbus look and feel */
		// <editor-fold default state="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (UIManager.LookAndFeelInfo info : UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PreferencesPanel.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PreferencesPanel.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PreferencesPanel.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PreferencesPanel.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
//		java.awt.EventQueue.invokeLater(new Runnable() {
//			public void run() {
//				
//				new PreferencesPanel().setVisible(true);
//			}
//		});
	}
} // End of Profile class ,,,
